@using Spine.Entities.Cmn;
@using Spine.Web.Clases;
@using Spine.Constants.Cfg;
@using Spine.Constants.Cmn;
@using Spine.Web.Areas.Cmn.Models;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    AlmacenAccess vobjAlmacenAccess = (AlmacenAccess)ViewBag.objAlmacenAccess;
    List<Sucursal> vlstSucursales = (List<Sucursal>)ViewBag.lstSucursales;
    List<Breadcrumb> breadcrumbs = new List<Breadcrumb>();
    breadcrumbs.Add(new Breadcrumb { Name = "Almacen" });
}

@section PluginStyle {
    <link rel="stylesheet" href="/Content/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="/Content/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
    <link rel="stylesheet" href="/Content/plugins/select2/select2.min.css" />
    <link rel="stylesheet" href="/Content/plugins/select2/select2-bootstrap.css" />
}

@section Breadcrumb {
    @Html.Partial("_Breadcrumb", breadcrumbs)
}

<div class="card card-info card-outline">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title m-0">Almacen</h5>
        <div class="card-tools">
            @if (vobjAlmacenAccess.lCrear)
            {
                <a id="btnCrear" class="btn btn-info btn-sm my-0 mr-0" title="Crear Almacen">
                    <i class="fas fa-plus mr-2"></i> Crear
                </a>
            }
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-lg-12">
                <table id="tblAlmacenes" class="table table-striped table-bordered table-hover table-sm rounded"></table>
            </div>
        </div>
    </div>
</div>

@section Modal {

    @{Html.RenderAction("Ver", "Cambio", new { area = "Aud", psEtiqueta = "Almacén", piEntId = EntidadConstant.Almacen });}

    <div id="modAlmacen"
         class="modal fade"
         role="dialog"
         tabindex="-1"
         aria-hidden="true"
         data-keyboard="false"
         data-backdrop="static"
         data-focus-on="input:first">

        <div class="modal-dialog modal-md" role="document">
            <div class="modal-content">
                <form role="form" id="frmAlmacen" autocomplete="off">
                    <div class="modal-header">
                        <h5 class="modal-title">Crear Almacen</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="form-group col-md-12">
                                <label for="txtAlmNombre">Nombre<span style="color:red"> *</span></label>
                                <input type="text" id="txtAlmNombre" class="form-control form-control-sm" name="sAlmNombre" maxlength="50" required />
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-12">
                                <label for="cboSucursal">Sucursal<span style="color:red"> * </span></label>
                                <select id="cboSucursal" class="form-control form-control-sm" name="iSucursalId" required>
                                    <option value="">- Seleccione -</option>
                                    @foreach (Sucursal vobjSucursal in vlstSucursales)
                                    {
                                        <option value="@vobjSucursal.iSucursalId">@vobjSucursal.sSucNombre</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-12">
                                <label for="txtAlmDireccion">Direccion<span style="color:red"> *</span></label>
                                <input type="text" id="txtAlmDireccion" class="form-control form-control-sm" name="sAlmDireccion" maxlength="100" required />
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-12">
                                <label for="cboUbigeos">Ubigeo<span style="color:red"> * </span></label>
                                <select id="cboUbigeos" class="form-control form-control-sm" name="iUbiId" required></select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-3">
                                <label for="txtAlmCodigoSunat">Código de Sunat</label>
                                <input type="text" id="txtAlmCodigoSunat" class="form-control form-control-sm" name="sAlmCodigoSunat" maxlength="5" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" id="btnGuardar" class="btn btn-info btn-sm my-0 mr-0">
                            <span class="fas fa-save mr-2"></span>Guardar
                        </button>
                        <button type="button" id="btnCancelar" class="btn btn-secondary btn-sm my-0 mr-0" data-dismiss="modal">
                            <span class="fas fa-times mr-2"></span>Cancelar
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@section PluginScript {
    <script src="/Content/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="/Content/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="/Content/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="/Content/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="~/Scripts/plugins/select2/select2.full.min.js"></script>
}

@section Script {
    <script type="text/javascript">
        // ***** Titulo
        document.title = "Almacenes : @CnsCadenas.WEB_TITULO";

        // ***** Variables
        var tblAlmacenes = null;
        var lstAlmacenes = [];
        var objAlmacen = {};

        // ***** Funciones
        const crearControles = () => {
            fnSelect2({
                sIdCombo: "#cboUbigeos",
                sUrl: "cfg/ubigeo/consultar",
                sAtributoValor: "iUbiId",
                sAtributoMostrar: "sUbiRama",
                objParametros: { piUbiEstado: @EstadoConstant.Activado, piUbiTipo: @TipoUbigeoConstant.Distrito },
                sPlaceholder: "- Seleccione -",
                sParametroBusqueda: "psUbiRama"
            });
        }
        const crearTablaAlmacenes = () => {
            tblAlmacenes = $('#tblAlmacenes').DataTable({
                ...cnsDataTableOptions,
                columns: [
                    { title: "N°", data: null, visible: true, width: "20px", className: "text-center",
                      render: (data, type, row, meta) => (meta.row + 1)
                    },
                    { title: "Almacen", data: "sAlmNombre", visible: true, width: "15%" },
                    { title: "Sucursal", data: "sSucNombre", visible: true, width: "15%" },
                    { title: "Direccion", data: "sAlmDireccion", visible: true },
                    { title: "Ubigeo", data: "sUbiRama", visible: true, width: "25%" },
                    { title: "Cod.Sunat", data: "sAlmCodigoSunat", visible: true, width: "80px" },
                    {
                        title: "Estado", data: "sAlmEstado", visible: true, width: "80px", className: "text-center",
                        render: (data, type, row, meta) => fnCrearTag("span",
                            { sClase: (row.iAlmEstado == @EstadoConstant.Activado ? "badge badge-success" : "badge badge-danger py-1"), sTexto: data }).prop("outerHTML")
                    },
                    { title: "Acciones", data: null, visible: true, width: "60px",
                        render: (data, type, row, meta) => {
                            if (type !== 'display') return data;

                            let vlstData = [{ sNombre: "data-row", sValor: meta.row }];
                            let vobjOpciones = fnCrearTag("div", { sClase: "card-action d-inline" });

                            if (row.iAlmEstado ==  @EstadoConstant.Activado) {
                                if (@Convert.ToString(vobjAlmacenAccess.lEditar).ToLower()) {
                                    vobjOpciones.append(fnCrearTag("button", { sClase: "btn btn-info btn-xs btn-action btnEditar", sTitulo: "Editar", sIcono: "fas fa-edit", lstData: vlstData }));
                                }
                                if (@Convert.ToString(vobjAlmacenAccess.lDesactivar).ToLower()) {
                                    vobjOpciones.append(fnCrearTag("button", { sClase: "btn btn-info btn-xs btn-action btnDesactivar ml-2", sTitulo: "Desactivar", sIcono: "fas fa-times", lstData: vlstData }));
                                }
                            } else if (row.iAlmEstado ==  @EstadoConstant.Desactivado) {
                                if (@Convert.ToString(vobjAlmacenAccess.lActivar).ToLower()) {
                                    vobjOpciones.append(fnCrearTag("button", { sClase: "btn btn-info btn-xs btn-action btnActivar", sTitulo: "Activar", sIcono: "fas fa-check", lstData: vlstData }));
                                }
                            }
                            vobjOpciones.append(fnCrearTag("button", { sClase: "btn btn-info btn-xs btn-action btnVerCambios ml-2", sTitulo: "Ver Cambios", sIcono: "fas fa-clock", lstData: vlstData }));

                            return vobjOpciones.prop("outerHTML");
                        }
                    }
                ]
            });
        }

        const consultar = () => {
            fnProcesando();
            fnGet("cmn/almacen/consultar", {})
                .then((pobjApiRpta) => {
                    if (fnVerificarApiRpta(pobjApiRpta)) {
                        lstAlmacenes = pobjApiRpta.objDatos;
                        tblAlmacenes.clear().draw();
                        tblAlmacenes.rows.add(lstAlmacenes).draw().columns.adjust().responsive.recalc();
                    }
                    fnProcesando(false);
                });
        }
        const mostrarCrear = () => {
            if (@Convert.ToString(vobjAlmacenAccess.lCrear).ToLower()) {
                objAlmacen = { iAlmacenId: 0 };
                fnLimpiarDiv("#frmAlmacen");
                $("#modAlmacen .modal-title").text("Crear Almacén");
                $("#modAlmacen").modal({ backdrop: "static", keyboard: false });
                $("#modAlmacen").modal("show");
            } else {
                fnAdvertencia("Ud. no tiene permiso para crear almacén.");
            }
        }
        const mostrarEditar = (event) => {
            if (@Convert.ToString(vobjAlmacenAccess.lEditar).ToLower()) {
                fnLimpiarDiv("#frmAlmacen");
                let viFila = event.currentTarget.getAttribute("data-row");
                objAlmacen = tblAlmacenes.row(viFila).data();
                fnLlenarDiv("#frmAlmacen", objAlmacen);
                fnSelectValor("#cboUbigeos", objAlmacen.iUbiId, objAlmacen.sUbiRama);
                $("#modAlmacen .modal-title").text("Editar Almacén");
                $("#modAlmacen").modal("show");
            } else {
                fnAdvertencia("Ud. no tiene permiso para editar almacén.");
            }
        }
        const guardar = () => {
            if (@Convert.ToString(vobjAlmacenAccess.lCrear).ToLower() || @Convert.ToString(vobjAlmacenAccess.lEditar).ToLower()) {
                if ($("#frmAlmacen")[0].checkValidity()) {
                    fnPregunta("¿Esta seguro de guardar Almacen?", function () {
                        fnProcesando();
                        fnLlenarObjeto("#frmAlmacen", objAlmacen);
                        objAlmacen.iAlmEstado = @EstadoConstant.Activado;
                        if (objAlmacen.AlmacenId == 0) {
                            fnPost('cmn/almacen/crear', objAlmacen)
                                .then((pobjApiRpta) => {
                                    if (fnVerificarApiRpta(pobjApiRpta)) {
                                        fnLimpiarDiv("#modAlmacen");
                                        $("#modAlmacen").modal("hide");
                                        fnMensaje("Se creó almacén exitosamente.", pobjApiRpta.sTipo);
                                        consultar();
                                    }
                                    fnProcesando(false);
                                });
                        } else {
                            fnPut('cmn/almacen/editar', objAlmacen)
                                .then((pobjApiRpta) => {
                                    if (fnVerificarApiRpta(pobjApiRpta)) {
                                        fnLimpiarDiv("#modAlmacen");
                                        $("#modAlmacen").modal("hide");
                                        fnMensaje("Se editó almacén exitosamente.", pobjApiRpta.sTipo);
                                        consultar();
                                    }
                                    fnProcesando(false);
                                });
                        }
                    });
                } else {
                    $("#frmAlmacen")[0].reportValidity();
                }
            } else {
                fnAdvertencia("Ud. no tiene permiso para crear o editar Almacenes");
            }
        }

        const activar = (event) => {
            if (@Convert.ToString(vobjAlmacenAccess.lActivar).ToLower()) {
                let viFila = event.currentTarget.getAttribute("data-row");
                objAlmacen = tblAlmacenes.row(viFila).data();
                fnPregunta("¿Está seguro de activar almacén?", function () {
                    fnProcesando();
                    fnPatch(`cmn/almacen/activar/${objAlmacen.iAlmacenId}`, {})
                        .then((pobjApiRpta) => {
                            if (fnVerificarApiRpta(pobjApiRpta)) {
                                fnMensaje("Se activó almacén exitosamente.");
                                lstAlmacenes[viFila] = pobjApiRpta.objDatos;
                                tblAlmacenes.clear().draw();
                                tblAlmacenes.rows.add(lstAlmacenes).draw().columns.adjust().responsive.recalc();
                            }
                            fnProcesando(false);
                        });
                });
            } else {
                fnAdvertencia("Ud. no tiene permiso para activar almacén.");
            }
        }
        const desactivar = (event) => {
            if (@Convert.ToString(vobjAlmacenAccess.lDesactivar).ToLower()) {
                let viFila = event.currentTarget.getAttribute("data-row");
                objAlmacen = tblAlmacenes.row(viFila).data();
                fnPregunta("¿Está seguro de desactivar almacén?", function () {
                    fnProcesando();
                    fnPatch(`cmn/almacen/desactivar/${objAlmacen.iAlmacenId}`, {})
                        .then((pobjApiRpta) => {
                            if (fnVerificarApiRpta(pobjApiRpta)) {
                                fnMensaje("Se desactivó almacén exitosamente.");
                                lstAlmacenes[viFila] = pobjApiRpta.objDatos;
                                tblAlmacenes.clear().draw();
                                tblAlmacenes.rows.add(lstAlmacenes).draw().columns.adjust().responsive.recalc();
                            }
                            fnProcesando(false);
                        });
                });
            } else {
                fnAdvertencia("Ud. no tiene permiso para desactivar almacén.");
            }
        }

        const mostrarCambios_Almacen = (event) => {
            var vobjAlmacen = tblAlmacenes.row(event.currentTarget.getAttribute("data-row")).data();
            mostrarCambios({ sIdentificador: vobjAlmacen.sAlmNombre, iCamRegistro: vobjAlmacen.iAlmacenId });
        }

        // ***** Eventos
        $(document).ready(() => {
            crearControles();
            crearTablaAlmacenes();
            consultar();
        });

        $(document).on("click", "#btnCrear", mostrarCrear);
        $(document).on("click", ".btnEditar", mostrarEditar);
        $(document).on("click", "#btnGuardar", guardar);

        $(document).on("click", ".btnActivar", activar);
        $(document).on("click", ".btnDesactivar", desactivar);

        $(document).on("click", ".btnVerCambios", mostrarCambios_Almacen);
    </script>
}
